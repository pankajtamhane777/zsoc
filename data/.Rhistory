shiny::runApp('Desktop/projects/ds')
shiny::runApp('Desktop/projects/ds')
shiny::runApp('Desktop/projects/ds')
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
shiny::runApp('Desktop/projects/ds')
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="states",
width=600, height=400))
plot(GeoStates)
str(df)
gvisGeoMap(df, df$cityName, df$activeUsers)
gvisGeoMap(df, df$cityName, df$activeUsers)
gvisGeoMap(df, "cityName", "activeUsers")
plot(gvisGeoMap(df, "cityName", "activeUsers"))
plot(gvisGeoMap(df, "state", "activeUsers"))
str(df)
plot(gvisGeoMap(df, "stateCode", "activeUsers"))
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.abb", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="states",
width=600, height=400))
plot(GeoStates)
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="states",
width=600, height=400))
plot(GeoStates)
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="markers",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
shiny::runApp('Desktop/projects/vz/Prediction 2')
shiny::runApp('Desktop/projects/vz/Prediction')
shiny::runApp('Desktop/projects/vz/newvz')
shiny::runApp('Desktop/projects/vz/newvz')
shiny::runApp('Desktop/projects/vz/Prediction 2')
shiny::runApp('Desktop/projects/vz/Prediction 2')
rm(list=ls(all=TRUE))
devtools::install_github("rstudio/flexdashboard")
shiny::runApp('Desktop/projects/datacrucs/R-Scripts')
shiny::runApp('Desktop/projects/datacrucs/R-Scripts')
shiny::runApp('Desktop/projects/datacrucs/R-Scripts')
head(iris)
iris
head(iris)
names(iris)
str(iris)
names(iris)
x = iris[, -5]
y = iris$Species
kc <- kmeans(x, 3)
kc
table(y, kc$cluster)
table(y, kc$cluster)
plot(x[c("Sepal.leangth", "Sepal.Width")], col=kc$cluster)
names(x)
plot(x[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=23, cex=3)
kc$centers
library(class)
library(lubridate)
library(dplyr)
table(iris$Species)
iris
library(ggvis)
install.packages('ggvis')
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill=~Species)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill=~Species) %>% layer_points()
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
ggvis(iris$Sepal.Length, iris$Sepal.Width, fill = iris$Species) %>% layer_points()
ggvis(iris$Sepal.Length, iris$Sepal.Width, fill = iris$Species)
library(dply)
library(dplyr)
ggvis(iris$Sepal.Length, iris$Sepal.Width, fill = iris$Species) %>% layer_points()
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(iris)
summary(iris[c("Petal.Width", "Sepal.Width")])
library(class)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)
set.seed(123)
ind <- sample(2, nrow(iris), replace = TRUE, prob = (0.7, 0.3))
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
iris.train <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
iris
str(iris)
iris_pred <- knn(train = iris.train, test = iris.test, cl = iris.trainLabels, k=3)
iris_pred
library(gmodels)
install.packages(gmodels)
install.packages('gmodels')
library(gmodels)
library(gmodels)
iris_pred
iris_pred
CrossTable(x = iris.testLabels, y = iris_pred, chisq = FALSE)
install.packages("LDAvis")
shiny::runApp('Desktop/projects/zsoc/data')
shiny::runApp('Desktop/projects/zsoc/data')
